@page "/login"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient httpClient

<h1>Login</h1>
<form @onsubmit="HandleSubmit">
    <label>Email:</label>
    <input type="email" @bind="email" />
    <label>Password:</label>
    <input type="password" @bind="password" />
    <button type="submit">Login</button>
</form>

@code {
    private string email;
    private string password;

    private async Task HandleSubmit()
    {
        var loginModel = new { Email = email, Password = password };
        var response = await httpClient.PostAsJsonAsync("https://localhost:44380/login", loginModel);

        // Handle response
        if (response.IsSuccessStatusCode)
        {
            // Redirect or do something on successful login
        }
        else
        {
            // Handle login failure
        }
    }
}

@* 
<div class="row">
    <div class="col-lg-5">
        <div class="alert alert-info mb-3">@Message</div>
        <EditForm Model="LoginModel" OnSubmit="LoginAsync">
            <DataAnnotationsValidator />
            <FloatingText @bind-Value="LoginModel.Email" Label="Email" Placeholder="example@gmail.com" class="form-controll mb-3 Type="email" />
            <FloatingText @bind-Value="LoginModel.Password"  Label="Password" Placeholder="*****" Type="password" class="form-controll mb-3" />
            <button class="btn btn-primary mb-3" type="submit">Login</button>
            <ValidationSummary class="text-danger" />
        </EditForm>


    </div>
</div>

@code {
    string? Message = string.Empty;
    LoginDTO LoginModel = new();
    async Task LoginAsync()
    {
        Message = null;
        var result = await UserService.LoginUserAsync(LoginModel);
        if (result.Success)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(result.Token);
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            Message = result.Message;
        }
    }
} *@